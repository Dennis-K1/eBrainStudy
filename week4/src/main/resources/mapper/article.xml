<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.article">

  <!--
    article 테이블 매핑 게시글 정보, 게시글 카테고리 정보, 게시글 댓글 목록
  -->
  <resultMap id="boardVOArticleVO" type="com.week4.vo.BoardVO$ArticleVO">
    <result property="id" column="article_id" />
    <result property="title" column="title" />
    <result property="content" column="content" />
    <result property="views" column="views" />
    <result property="writer" column="writer" />
    <result property="password" column="password" />
    <result property="password" column="password" />
    <result property="dateCreated" column="date_created" />
    <result property="lastUpdated" column="last_updated" />
    <result property="fileAttached" column="file_attached" />
    <result property="articleDeleted" column="article_deleted" />
    <result property="categoryId" column="article_category_id" />
    <!-- !!!!!!!!!!!!<association 없이 selectAllArticles 의 query 결과를 바로 categoryName에 매핑할 수는 없는지??>!!!!!!!!!!!   -->
    <association property="categoryName" column="article_category_id" select="selectCategoryNameById" />
    <collection property="commentList" column="article_id" javaType="java.util.ArrayList" ofType="boardVOCommentVO" select="selectAllCommentsById" />
  </resultMap>

  <!--
    article_category 테이블 매핑 카테고리 정보
  -->
  <resultMap id="boardVOCategoryVO" type="com.week4.vo.BoardVO$CategoryVO">
    <result property="id" column="article_category_id" />
    <result property="name" column="name" />
  </resultMap>

  <!--
    article_comment 테이블 매핑 댓글 정보
  -->
  <resultMap id="boardVOCommentVO" type="com.week4.vo.BoardVO$CommentVO">
    <result property="id" column="article_comment_id" />
    <result property="articleId" column="article_id" />
    <result property="content" column="content" />
    <result property="dateCreated" column="date_created" />
  </resultMap>

  <!--
    selectAllArticles 를 위한 검색값 설정
    검색값이 null 이 아닌 경우:
      startDate 보다 늦게 등록되거나,
      endDate 보다 이르거 등록되거나,
      keyword 를 포함하거나,
      categoryId 에 해당되는 카테고리를 가진 게시글 필터링.
  -->
  <sql id="searchParameters">
    <trim prefix="and" prefixOverrides="and|or">
      <if test="startDate != null">
        #{startDate} &lt; article.date_created
      </if>
      <if test="endDate != null">
        and #{endDate} + INTERVAL 1 DAY &gt; article.date_created
      </if>
      <if test="keyword != null">
        <bind name="keyword" value="'%' + keyword + '%'" />
        and article.title LIKE #{keyword}
      </if>
      <if test="categoryId != null">
        and category.article_category_id LIKE #{categoryId}
      </if>
    </trim>
  </sql>

  <!--
    BoardVO.articleList 를 위한 게시글 및 카테고리 번호 조회
      password 로 인해 * 사용 불가
    Parameter : SearchVO (검색값 저장 객체)
      검색값 : searchParameters 참조,
      PAGE_SIZE : 페이지 표시 게시글 수
      firstArticleIndex : 페이지 첫 번째 게시글 인덱스
  -->
  <select id="selectAllArticles" resultMap="boardVOArticleVO" parameterType="com.week4.vo.BoardVO$SearchVO">
    SELECT
        category.*,
        article.article_id,
        article.title,
        article.content,
        article.views,
        article.writer,
        article.date_created,
        article.file_attached,
        IFNULL(article.last_updated,'-') AS last_updated
    FROM
        article
        LEFT JOIN article_category AS category
        ON article.article_category_id = category.article_category_id
     WHERE
        article.article_deleted = 0
        <include refid="searchParameters"></include>
        ORDER BY article.article_id DESC
        <if test="PAGE_SIZE != null">
        LIMIT #{PAGE_SIZE}
        </if>
        <if test="firstArticleIndex != null">
        OFFSET #{firstArticleIndex}
        </if>
    </select>

  <!--
    BoardVO.articleList 를 위한 대상 게시글 댓글 목록 조회
  -->
  <select id="selectAllCommentsById" resultMap="boardVOCommentVO">
    SELECT
        comment.*
    FROM
        article_comment AS comment
    WHERE
        article_id = #{article_id}
  </select>

  <!--
    BoardVO.articleList 를 위한 대상 게시글 카테고리 이름 조회
  -->
  <select id="selectCategoryNameById" resultType="java.lang.String">
    SELECT
        name
    FROM
        article_category
    WHERE
        article_category_id = #{article_category_id}
  </select>

  <!--
    BoardVO.categoryList 를 위한 카테고리 정보 조회
  -->
  <select id="selectAllCategories" resultMap="boardVOCategoryVO">
    SELECT
        *
    FROM
        article_category
  </select>

  <!--
    대상 게시글 조회
      password 로 인해 * 사용 불가
    Parameter : articleId
  -->
  <select id="selectArticle" resultMap="boardVOArticleVO" parameterType="integer">
    SELECT
        category.*,
        article.article_id,
        article.title,
        article.content,
        article.views,
        article.writer,
        article.date_created,
        article.file_attached,
        IFNULL(article.last_updated,'-') AS last_updated
    FROM
        article
        LEFT JOIN article_category AS category
        ON article.article_category_id = category.article_category_id
    WHERE
        article_id = #{value}
  </select>


  <!--
    검색 조건 기반 게시글 목록 총 갯수 조회
  -->
  <select id="countArticles" resultType="integer" parameterType="com.week4.vo.BoardVO$SearchVO">
    SELECT
        COUNT(*)
    FROM
        article
        LEFT JOIN article_category AS category
        ON article.article_category_id = category.article_category_id
    WHERE
        article.article_deleted = 0
        <include refid="searchParameters"></include>
  </select>


  <!--
    게시글 삽입(등록) 후 삽입된 게시글 번호 반환
  -->
  <insert id="insertArticle" parameterType="com.week4.vo.BoardVO$ArticleVO">
    INSERT INTO
        article (article_category_id,
                 title,
                 content,
                 writer,
                 password)
    VALUES (#{categoryId},
            #{title},
            #{content},
            #{writer},
            #{password} )
    <selectKey keyProperty="id" resultType="integer">
    SELECT
        LAST_INSERT_ID()
    </selectKey>
  </insert>

  <!--
    deleteArticle
    삭제 : article_deleted = 1, 미삭제 : article_deleted = 0 (default)
  -->
  <update id="deleteArticle" parameterType="integer">
    UPDATE
        article
    SET
        article_deleted = 1
    WHERE
        article_id = #{value}
  </update>


<!--  &lt;!&ndash;updateArticle&ndash;&gt;-->
<!--  <update id="updateArticle" parameterType="ArticleVO">-->
<!--    UPDATE-->
<!--        article-->
<!--    SET-->
<!--        title = #{title},-->
<!--        content = #{content},-->
<!--        writer = #{writer}-->
<!--    WHERE-->
<!--        article_id = #{id}-->
<!--  </update>-->

<!--  &lt;!&ndash;increaseViews&ndash;&gt;-->
<!--  <update id="increaseViews" parameterType="integer">-->
<!--    UPDATE-->
<!--        article-->
<!--    SET-->
<!--        views = views + 1-->
<!--    WHERE-->
<!--        article_id = #{value}-->
<!--  </update>-->

<!--  &lt;!&ndash;updateFileStatus&ndash;&gt;-->
<!--  <update id="updateFileStatus" parameterType="map">-->
<!--    UPDATE-->
<!--        article-->
<!--    SET-->
<!--        file_attached = #{fileStatus}-->
<!--    WHERE-->
<!--        article_id = #{articleId}-->
<!--  </update>-->

</mapper>
